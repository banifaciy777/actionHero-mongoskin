// Generated by CoffeeScript 1.6.3
/*
# #Config File
# I will be loded into api.configData. This particular `config.js` file will only be loaded in
# development.
*/

/*
# Requires
*/

var cluster, configData, e, fs;

fs = require("fs");

cluster = require("cluster");

configData = {};

/*
# ##General Config Section
*/


configData.general = {
  apiVersion: "0.0.1",
  serverName: "actionHero API",
  serverToken: "change-me",
  welcomeMessage: "Hello! Welcome to the actionHero api",
  flatFileNotFoundMessage: "Sorry, that file is not found :(",
  serverErrorMessage: "The server experienced an internal error",
  defaultChatRoom: "defaultRoom",
  defaultLimit: 100,
  defaultOffset: 0,
  developmentMode: true,
  simultaneousActions: 5,
  paths: {
    action: __dirname + "/actions",
    task: __dirname + "/tasks",
    "public": __dirname + "/public",
    pid: __dirname + "/pids",
    log: __dirname + "/log",
    server: __dirname + "/servers",
    initializer: __dirname + "/initializers"
  }
};

/*
# ##Logging Config Section
*/


configData.logger = {
  transports: []
};

if (cluster.isMaster) {
  configData.logger.transports.push(function(api, winston) {
    return new winston.transports.Console({
      colorize: true,
      level: "debug",
      timestamp: api.utils.sqlDateTime
    });
  });
}

try {
  fs.mkdirSync("./log");
} catch (_error) {
  e = _error;
  if (e.code !== "EEXIST") {
    console.log(e);
    process.exit();
  }
}

configData.logger.transports.push(function(api, winston) {
  return new winston.transports.File({
    filename: configData.general.paths.log + "/" + api.pids.title + ".log",
    level: "info",
    timestamp: true
  });
});

/*
# ##Stats Config Section
*/


configData.stats = {
  writeFrequency: 1000,
  keys: ["actionHero:stats"]
};

/*
# ##MongoDB Config Section
*/


configData.mongo = {
  seed: true,
  host: "localhost",
  port: 27017,
  db: "test",
  user: "",
  pass: ""
};

/*
# ##Redis Config Section
*/


configData.redis = {
  fake: true,
  host: "127.0.0.1",
  port: 6379,
  password: null,
  options: null,
  database: 0
};

/*
# ##Faye Config Section
# Faye is a publish-subscribe messaging system based on the [Bayeux](http://svn.cometd.com/trunk/bayeux/bayeux.html) protocol. It provides message servers for Node.js and Ruby, and clients for use on the server and in all major web browsers.
*/


configData.faye = {
  mount: "/faye",
  timeout: 45,
  ping: null,
  redis: configData.redis,
  namespace: "faye:"
};

/*
# ##Tasks Config Section
# See https://github.com/taskrabbit/node-resque for more information / options.
*/


configData.tasks = {
  scheduler: true,
  queues: ["*"],
  timeout: 5000,
  redis: configData.redis
};

/*
# ##Servers Config Section
# Uncomment the section to enable the server.
*/


configData.servers = {
  web: {
    secure: false,
    serverOptions: {},
    port: 8080,
    bindIP: "0.0.0.0",
    httpHeaders: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "HEAD, GET, POST, PUT, DELETE, OPTIONS, TRACE",
      "Access-Control-Allow-Headers": "Content-Type, X-Requested-With, Origin"
    },
    /*
    # Route that actions will be served from; secondary route against this route will be treated as actions,
    #
    # IE: `/api/?action=test == /api/test/ .`
    */

    urlPathForActions: "api",
    urlPathForFiles: "public",
    rootEndpointType: "api",
    directoryFileType: "index.html",
    flatFileCacheDuration: 60,
    fingerprintOptions: {
      cookieKey: "sessionID",
      toSetCookie: true,
      onlyStaticElements: false
    },
    formOptions: {
      uploadDir: "/tmp",
      keepExtensions: false,
      maxFieldsSize: 1024 * 1024 * 100
    },
    metadataOptions: {
      serverInformation: true,
      requestorInformation: true
    },
    returnErrorCodes: false
  },
  websocket: {}
};

exports.configData = configData;
